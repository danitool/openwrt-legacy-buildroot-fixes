diff --git a/tools/m4/patches/011-fix-sigstksz.patch b/tools/m4/patches/011-fix-sigstksz.patch
new file mode 100644
index 0000000000..977420e15e
--- /dev/null
+++ b/tools/m4/patches/011-fix-sigstksz.patch
@@ -0,0 +1,105 @@
+--- a/lib/c-stack.c
++++ b/lib/c-stack.c
+@@ -48,19 +48,20 @@
+ 
+ #include <signal.h>
+ #if ! HAVE_STACK_T && ! defined stack_t
+ typedef struct sigaltstack stack_t;
+ #endif
+-#ifndef SIGSTKSZ
+-# define SIGSTKSZ 16384
+-#elif HAVE_LIBSIGSEGV && SIGSTKSZ < 16384
+-/* libsigsegv 2.6 through 2.8 have a bug where some architectures use
+-   more than the Linux default of an 8k alternate stack when deciding
+-   if a fault was caused by stack overflow.  */
+-# undef SIGSTKSZ
+-# define SIGSTKSZ 16384
+-#endif
++/* Storage for the alternate signal stack.
++ * 64 KiB is not too large for Gnulib-using apps, and is large enough
++ * for all known platforms. Smaller sizes may run into trouble.
++ * For example, libsigsegv 2.6 through 2.8 have a bug where some
++ * architectures use more than the Linux default of an 8 KiB alternate
++ * stack when deciding if a fault was caused by stack overflow. */
++static max_align_t alternate_signal_stack[(64 * 1024
++					+ sizeof (max_align_t) - 1)
++					/ sizeof (max_align_t)];
++
+ 
+ #include <stdlib.h>
+ #include <string.h>
+ 
+ /* Posix 2001 declares ucontext_t in <ucontext.h>, Posix 200x in
+@@ -128,22 +129,10 @@
+ }
+ 
+ #if (HAVE_SIGALTSTACK && HAVE_DECL_SIGALTSTACK \
+      && HAVE_STACK_OVERFLOW_HANDLING) || HAVE_LIBSIGSEGV
+ 
+-/* Storage for the alternate signal stack.  */
+-static union
+-{
+-  char buffer[SIGSTKSZ];
+-
+-  /* These other members are for proper alignment.  There's no
+-     standard way to guarantee stack alignment, but this seems enough
+-     in practice.  */
+-  long double ld;
+-  long l;
+-  void *p;
+-} alternate_signal_stack;
+ 
+ static void
+ null_action (int signo __attribute__ ((unused)))
+ {
+ }
+@@ -207,12 +196,12 @@
+   program_error_message = _("program error");
+   stack_overflow_message = _("stack overflow");
+ 
+   /* Always install the overflow handler.  */
+   if (stackoverflow_install_handler (overflow_handler,
+-                                     alternate_signal_stack.buffer,
+-                                     sizeof alternate_signal_stack.buffer))
++                                     alternate_signal_stack,
++                                     sizeof alternate_signal_stack))
+     {
+       errno = ENOTSUP;
+       return -1;
+     }
+   /* Try installing a general handler; if it fails, then treat all
+@@ -301,18 +290,18 @@
+ {
+   int r;
+   stack_t st;
+   struct sigaction act;
+   st.ss_flags = 0;
++  st.ss_sp = alternate_signal_stack;
++  st.ss_size = sizeof alternate_signal_stack;
+ # if SIGALTSTACK_SS_REVERSED
+   /* Irix mistakenly treats ss_sp as the upper bound, rather than
+      lower bound, of the alternate stack.  */
+-  st.ss_sp = alternate_signal_stack.buffer + SIGSTKSZ - sizeof (void *);
+-  st.ss_size = sizeof alternate_signal_stack.buffer - sizeof (void *);
+-# else
+-  st.ss_sp = alternate_signal_stack.buffer;
+-  st.ss_size = sizeof alternate_signal_stack.buffer;
++  st.ss_size -= sizeof (void *);
++  char *ss_sp = st.ss_sp;
++  st.ss_sp = ss_sp + st.ss_size;
+ # endif
+   r = sigaltstack (&st, NULL);
+   if (r != 0)
+     return r;
+ 
+--- a/lib/c-stack.h
++++ b/lib/c-stack.h
+@@ -34,7 +34,7 @@
+    A null ACTION acts like an action that does nothing.
+ 
+    ACTION must be async-signal-safe.  ACTION together with its callees
+-   must not require more than SIGSTKSZ bytes of stack space.  Also,
++   must not require more than 64 KiB of stack space.  Also,
+    ACTION should not call longjmp, because this implementation does
+    not guarantee that it is safe to return to the original stack.
+ 